// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userScoreFieldNames          = builder.RawFieldNames(&UserScore{})
	userScoreRows                = strings.Join(userScoreFieldNames, ",")
	userScoreRowsExpectAutoSet   = strings.Join(stringx.Remove(userScoreFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userScoreRowsWithPlaceHolder = strings.Join(stringx.Remove(userScoreFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheZeroUserScoreIdPrefix = "cache:zero:userScore:id:"
)

type (
	userScoreModel interface {
		Insert(ctx context.Context, data *UserScore) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserScore, error)
		Update(ctx context.Context, data *UserScore) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserScoreModel struct {
		sqlc.CachedConn
		table string
	}

	UserScore struct {
		Id     int64         `db:"id"`
		UserId int64         `db:"user_id"`
		Score  sql.NullInt64 `db:"score"`
	}
)

func newUserScoreModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserScoreModel {
	return &defaultUserScoreModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_score`",
	}
}

func (m *defaultUserScoreModel) Delete(ctx context.Context, id int64) error {
	zeroUserScoreIdKey := fmt.Sprintf("%s%v", cacheZeroUserScoreIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, zeroUserScoreIdKey)
	return err
}

func (m *defaultUserScoreModel) FindOne(ctx context.Context, id int64) (*UserScore, error) {
	zeroUserScoreIdKey := fmt.Sprintf("%s%v", cacheZeroUserScoreIdPrefix, id)
	var resp UserScore
	err := m.QueryRowCtx(ctx, &resp, zeroUserScoreIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userScoreRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserScoreModel) Insert(ctx context.Context, data *UserScore) (sql.Result, error) {
	zeroUserScoreIdKey := fmt.Sprintf("%s%v", cacheZeroUserScoreIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userScoreRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Score)
	}, zeroUserScoreIdKey)
	return ret, err
}

func (m *defaultUserScoreModel) Update(ctx context.Context, data *UserScore) error {
	zeroUserScoreIdKey := fmt.Sprintf("%s%v", cacheZeroUserScoreIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userScoreRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Score, data.Id)
	}, zeroUserScoreIdKey)
	return err
}

func (m *defaultUserScoreModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheZeroUserScoreIdPrefix, primary)
}

func (m *defaultUserScoreModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userScoreRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserScoreModel) tableName() string {
	return m.table
}
