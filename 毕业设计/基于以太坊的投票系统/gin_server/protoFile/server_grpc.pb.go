// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoteClient is the client API for Vote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoteClient interface {
	//帐号相关
	CreateAccount(ctx context.Context, in *AccountPwd, opts ...grpc.CallOption) (*AccountInfo, error)
	//部署合约
	DeployContract(ctx context.Context, in *CreateTransaction, opts ...grpc.CallOption) (*ContractInfo, error)
	//初始化合约内容
	InitContractInfo(ctx context.Context, in *InitInfo, opts ...grpc.CallOption) (*Success, error)
	//投票
	Vote(ctx context.Context, in *InitVote, opts ...grpc.CallOption) (*Success, error)
	//获取以太币数量
	GetBalance(ctx context.Context, in *AccountAddress, opts ...grpc.CallOption) (*Balance, error)
	//获取合约内容
	GetContractContent(ctx context.Context, in *ContractAddr, opts ...grpc.CallOption) (*ContractContent, error)
	//获取票据内容
	GetVote(ctx context.Context, in *AllAddress, opts ...grpc.CallOption) (*Prove, error)
	//水龙头转账
	WithDraw(ctx context.Context, in *AccountAddress, opts ...grpc.CallOption) (*Null, error)
}

type voteClient struct {
	cc grpc.ClientConnInterface
}

func NewVoteClient(cc grpc.ClientConnInterface) VoteClient {
	return &voteClient{cc}
}

func (c *voteClient) CreateAccount(ctx context.Context, in *AccountPwd, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := c.cc.Invoke(ctx, "/Vote/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) DeployContract(ctx context.Context, in *CreateTransaction, opts ...grpc.CallOption) (*ContractInfo, error) {
	out := new(ContractInfo)
	err := c.cc.Invoke(ctx, "/Vote/DeployContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) InitContractInfo(ctx context.Context, in *InitInfo, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Vote/InitContractInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) Vote(ctx context.Context, in *InitVote, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Vote/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) GetBalance(ctx context.Context, in *AccountAddress, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := c.cc.Invoke(ctx, "/Vote/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) GetContractContent(ctx context.Context, in *ContractAddr, opts ...grpc.CallOption) (*ContractContent, error) {
	out := new(ContractContent)
	err := c.cc.Invoke(ctx, "/Vote/GetContractContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) GetVote(ctx context.Context, in *AllAddress, opts ...grpc.CallOption) (*Prove, error) {
	out := new(Prove)
	err := c.cc.Invoke(ctx, "/Vote/GetVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) WithDraw(ctx context.Context, in *AccountAddress, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/Vote/WithDraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteServer is the server API for Vote service.
// All implementations must embed UnimplementedVoteServer
// for forward compatibility
type VoteServer interface {
	//帐号相关
	CreateAccount(context.Context, *AccountPwd) (*AccountInfo, error)
	//部署合约
	DeployContract(context.Context, *CreateTransaction) (*ContractInfo, error)
	//初始化合约内容
	InitContractInfo(context.Context, *InitInfo) (*Success, error)
	//投票
	Vote(context.Context, *InitVote) (*Success, error)
	//获取以太币数量
	GetBalance(context.Context, *AccountAddress) (*Balance, error)
	//获取合约内容
	GetContractContent(context.Context, *ContractAddr) (*ContractContent, error)
	//获取票据内容
	GetVote(context.Context, *AllAddress) (*Prove, error)
	//水龙头转账
	WithDraw(context.Context, *AccountAddress) (*Null, error)
	mustEmbedUnimplementedVoteServer()
}

// UnimplementedVoteServer must be embedded to have forward compatible implementations.
type UnimplementedVoteServer struct {
}

func (UnimplementedVoteServer) CreateAccount(context.Context, *AccountPwd) (*AccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedVoteServer) DeployContract(context.Context, *CreateTransaction) (*ContractInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployContract not implemented")
}
func (UnimplementedVoteServer) InitContractInfo(context.Context, *InitInfo) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitContractInfo not implemented")
}
func (UnimplementedVoteServer) Vote(context.Context, *InitVote) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedVoteServer) GetBalance(context.Context, *AccountAddress) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedVoteServer) GetContractContent(context.Context, *ContractAddr) (*ContractContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractContent not implemented")
}
func (UnimplementedVoteServer) GetVote(context.Context, *AllAddress) (*Prove, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVote not implemented")
}
func (UnimplementedVoteServer) WithDraw(context.Context, *AccountAddress) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithDraw not implemented")
}
func (UnimplementedVoteServer) mustEmbedUnimplementedVoteServer() {}

// UnsafeVoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoteServer will
// result in compilation errors.
type UnsafeVoteServer interface {
	mustEmbedUnimplementedVoteServer()
}

func RegisterVoteServer(s grpc.ServiceRegistrar, srv VoteServer) {
	s.RegisterService(&Vote_ServiceDesc, srv)
}

func _Vote_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPwd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Vote/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).CreateAccount(ctx, req.(*AccountPwd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_DeployContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).DeployContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Vote/DeployContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).DeployContract(ctx, req.(*CreateTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_InitContractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).InitContractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Vote/InitContractInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).InitContractInfo(ctx, req.(*InitInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Vote/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).Vote(ctx, req.(*InitVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Vote/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).GetBalance(ctx, req.(*AccountAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_GetContractContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).GetContractContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Vote/GetContractContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).GetContractContent(ctx, req.(*ContractAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_GetVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).GetVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Vote/GetVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).GetVote(ctx, req.(*AllAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_WithDraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).WithDraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Vote/WithDraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).WithDraw(ctx, req.(*AccountAddress))
	}
	return interceptor(ctx, in, info, handler)
}

// Vote_ServiceDesc is the grpc.ServiceDesc for Vote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Vote",
	HandlerType: (*VoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Vote_CreateAccount_Handler,
		},
		{
			MethodName: "DeployContract",
			Handler:    _Vote_DeployContract_Handler,
		},
		{
			MethodName: "InitContractInfo",
			Handler:    _Vote_InitContractInfo_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Vote_Vote_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Vote_GetBalance_Handler,
		},
		{
			MethodName: "GetContractContent",
			Handler:    _Vote_GetContractContent_Handler,
		},
		{
			MethodName: "GetVote",
			Handler:    _Vote_GetVote_Handler,
		},
		{
			MethodName: "WithDraw",
			Handler:    _Vote_WithDraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
